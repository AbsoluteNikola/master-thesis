= Цели и задачи работы

== Цель исследования
Разработать универсального фреймворка для обобщенного вывода и проверки уточняющих типов, позволяющего стандартизировать интеграцию с SMT-решателями, предоставить универсальные алгоритмы для работы с предикатами и снизить порог вхождения для добавления уточняющих типов в различные языки программирования.

== Задачи
+ Провести обзор существующих языков программирования с уточняющими типами (LiquidHaskell, F\*, Dafny, Why3, Flux) с целью выявления их архитектурных особенностей, достоинств и ограничений для дальнейшего применения в проектируемом фреймворке.
+ Спроектировать архитектуру фреймворка, включая:
  + Определение грамматики предикатов и условий корректности
  + Разработку механизма работы с областями видимости
  + Создание абстракций для работы с типами и их сигнатурами
  + Проектирование контрактов для интеграции с целевыми языками
+ Реализовать компоненты фреймворка
+ Продемонстрировать применимость фреймворка путем реализации на его основе системы проверки уточняющих типов для подмножества языка OCaml, поддерживающей:
  + Ветвление и рекурсию
  + Функции высших порядков
  + Вывод предикатов
  + Параметрический полиморфизм и вывод типов
  + Полиморфные алгебраические типы данных
  + Сопоставление с образцом
+ Провести оценку разработанного решения по критериям:
  + Пользовательская простота интеграции и работы с фреймворком
  + Выразительность и мощность предоставляемых контрактов
  + Полнота покрытия потребностей при проверке уточняющих типов
  + Возможность расширения функциональности фреймворка

Представленные цель и задачи отражают комплексный подход к созданию универсального инструмента для верификации программного обеспечения через систему уточняющих типов, направленного на упрощение внедрения таких систем в различные языки программирования.
